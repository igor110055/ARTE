import numpy as np
from collections import deque


class SignalHub:
    def __init__(self, indicator_instance: list, deque_maxlen: int = 100):
        """
        Generate market signals from various indicator instances.
        It updates indicator values and signals.

        Args:
            indicator_instance: (list) list of indicator instance
            deque_maxlen: (int) maxlen of deque
        """
        self.indicator_instance = indicator_instance
        self.used_indicator = []
        self.value_dict = {}
        self.signal_dict = {}
        for ins in indicator_instance:
            name = ins.__class__.__name__
            self.used_indicator.append(name)
            self.value_dict[name] = deque(maxlen=deque_maxlen)
            self.signal_dict[name] = deque(maxlen=deque_maxlen)

    def update(self, price_queue: deque):
        self._update_value(price_queue)
        self._update_check(price_queue)

    def get_signal(self, indicator: str):
        """
        Return signals generated by using indicator.
        Args:
            indicator:
        Return:
            signal: (deque)
        """
        return self.signal_dict[indicator]

    def _update_value(self, price_queue: deque):
        """
        Update indicator values.
        Args:
            price_queue: (deque)
        """
        close = np.array(list(price_queue))

        for ins in self.indicator_instance:
            name = ins.__class__.__name__
            data = ins.calc(close)
            self.value_dict[name].append(data)

    def _update_check(self, price_queue: deque):
        """
        Run indicator touch/cross algorithms.
        Args:
            price_queue: (deque)
        """
        for ins in self.indicator_instance:
            name = ins.__class__.__name__
            # TODO Use multiple check algos
            data = ins.check_touch(self.value_dict[name], price_queue)
            self.signal_dict[name].append(data)
